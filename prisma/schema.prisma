// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model School {
  id       Int     @id @default(autoincrement())
  name     String
  domain   String  @unique // like 'ucmerced.edu'
  location String?

  tas   TA[]
  users User[]
}

model TA {
  id         Int      @id @default(autoincrement())
  name       String
  department String
  school     School   @relation(fields: [schoolId], references: [id])
  schoolId   Int
  reviews    Review[]
}

model Review {
  id           Int      @id @default(autoincrement())
  courseCode   String
  rating       Int
  difficulty   Int
  takeAgain    Boolean
  forCredit    Boolean
  usedTextbook Boolean
  attendance   Boolean
  grade        String
  tags         String // comma-separated string of tags
  comment      String
  createdAt    DateTime @default(now())

  ta   TA  @relation(fields: [taId], references: [id])
  taId Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId Int?

  reviews  Review[]
  accounts Account[]
  sessions Session[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
